Unit uPluginManager;

interface
uses System.SysUtils,  System.Classes, Windows, uDLLManager, Forms;

Const
      FUNC_IsValidPlugin        =   'IsValidPlugin';

TYPE  TFUNCBoolean              =   FUNCTION() : boolean; stdcall;

Type  TPixiPluginServer         =    class(TComponent)
      Private
      FMultiDLLLoader           :     TMultiDLLLoader;
      Public
      CONSTRUCTOR Create(AOwner : TComponent); override;
      DESTRUCTOR Destroy(); override;
      Published
      Protected
end;

Type TPluginManager             =    class(TMultiDLLLoader)
      Private
      FUNCTION FIsValidPlugin() : boolean;
      Public
      CONSTRUCTOR Create(AOwner : TComponent); override;
      DESTRUCTOR Destroy(); override;
      FUNCTION LoadDll() : integer; override;
      FUNCTION UnloadDll() : boolean; override;
      FUNCTION LoadAll() : boolean; override;
      FUNCTION UnloadAll() : boolean; override;
      PROCEDURE Clear(); override;
      PROCEDURE First(); override;
      PROCEDURE Last(); override;
      PROCEDURE Next(); override;
      PROCEDURE Back(); override;
      PROCEDURE Remove(); override;
      PROCEDURE Select(aIndex : integer); override;
      PROCEDURE Add(aFileName : TFileName); override;
      Published
      PROPERTY IsValidPlugin : boolean read FIsValidPlugin;
      Protected
end;

procedure Register();

implementation


PROCEDURE Register();
Begin
  RegisterComponents('Pixi',[TPluginManager]);
End;

CONSTRUCTOR TPixiPluginServer.Create(AOwner: TComponent);
begin
  Inherited Create(AOwner);
  FMultiDllLoader := TMultiDllLoader.Create(Self);
end;

DESTRUCTOR TPixiPluginServer.Destroy;
begin
  FMultiDllLoader.Free;
  Inherited Destroy();
end;


FUNCTION TPluginManager.FIsValidPlugin() : boolean;
Var
   EIsValidPlugin          :       TFUNCBoolean;
begin
Result := False; // RESULT of True can only come from plugin
if Self.IsLoaded then // is dll loaded before we try
  Begin
  @EIsValidPlugin := GetProcAddress(Handle,PChar(FUNC_IsValidPlugin)); // get remote procedure
  if @EIsValidPlugin <> nil then // check to make sure it was found
     Begin
     // remote procedure is found, call it IsValidPlugin procedure
      if EIsValidPlugin then
         Begin
            // success, considered valid
            Result := True;
         End
      ELSE
         Begin
           // anything else, not valid
           Result := False;
         End;
      End;
     End
  ELSE
      Begin
      // remote procecudre was not found, report false;
        Result := False;
      End;

//EIsValidPlugin := nil;
end;


CONSTRUCTOR TPluginManager.Create(AOwner : TComponent);
Begin
Inherited Create(AOwner);
End;

DESTRUCTOR TPluginManager.Destroy();
Begin
Inherited Destroy();
End;

FUNCTION TPluginManager.LoadDll() : integer;
Var
  aResult : integer;
Begin
aResult := Inherited LoadDll;
if aResult > 0 then
     Begin
       // Loaded Dll
     End
ELSE
   Begin
      // failed to load dll
   End;
Result := aResult;
End;


FUNCTION TPluginManager.UnloadDll() : boolean;
Var
  aResult : boolean;
Begin
aResult := Inherited UnloadDll;
Result := aResult;
if aResult = true then
   Begin
   // unload dll ok
   End
ELSE
   Begin
   // failed to unload dll
   End;
End;


PROCEDURE TPluginManager.Clear();
Begin
Inherited Clear;
End;

PROCEDURE TPluginManager.First();
Begin
Inherited First;
End;

PROCEDURE TPluginManager.Last();
Begin
Inherited Last;
End;

PROCEDURE TPluginManager.Next();
Begin
Inherited Next;
End;

PROCEDURE TPluginManager.Back();
Begin
Inherited Back;
End;

PROCEDURE TPluginManager.Remove();
Begin
Inherited Remove;
End;

PROCEDURE TPluginManager.Select(aIndex : integer);
Begin
Inherited Select(aIndex);
End;

PROCEDURE TPluginManager.Add(aFileName : TFileName);
Begin
Inherited Add(aFileName);
End;

FUNCTION TPluginManager.LoadAll() : boolean;
Begin
if Inherited LoadAll then
   Begin
     Result := True;
   End
ELSE
   Begin
     Result := False;
   End;
End;

FUNCTION TPluginManager.UnloadAll() : boolean;
Begin
if inherited UnloadAll then
   Begin
    Result := True;
   End
ELSE
   Begin
     Result := False;
   End;
End;

end.
